import json
import pymysql

def load_data():
    # Establish a MySQL connection
    connection = pymysql.connect(host='localhost',
                                 user='root',
                                 password='1234',
                                 database='cve',
                                 charset='utf8mb4',
                                 cursorclass=pymysql.cursors.DictCursor)


    with open('cve_data.json', 'r') as file:
        data = json.load(file)

    try:
        with connection.cursor() as cursor:
            # Iterate over each item in the JSON data
            for item in data['vulnerabilities']:
                cve_id = item['cve']['id']
                cve_id = item['cve']['id']
                # Insert CVE data
                insert_cve(cursor, cve_id, item)
                # Insert CVSS metrics data
                insert_cvss_metrics(cursor, cve_id, item)
                # Insert and link Product data and Platform data
                if 'configurations' in item['cve']:
                    for configuration in item['cve']['configurations']:
                        if 'nodes' in configuration:
                            for node in configuration['nodes']:
                                if 'cpeMatch' in node:
                                    for cpe in node['cpeMatch']:
                                        product_name = extract_product_name(cpe['criteria'])
                                        product_id = insert_product(cursor, product_name)
                                        link_cve_product(cursor, cve_id, product_id)
                                        platform_name = extract_platform_name(cpe['criteria'])
                                        platform_id = insert_platform(cursor, platform_name)
                                        link_cve_platform(cursor, cve_id, platform_id)

        connection.commit()

    finally:
        connection.close()

def insert_cve(cursor, cve_id, item):
    cursor.execute("SELECT CVE_ID FROM CVE WHERE CVE_ID = %s", (cve_id,))
    result = cursor.fetchone()
    if result:
        # If the CVE ID already exists, write it to a file
        with open('duplicates_cve_ids.txt', 'a') as file:
            file.write(f"{cve_id}\n")
    else:
        # The JSON structure includes fields for publish_date and last_modified
        sql = """INSERT INTO CVE (CVE_ID, Description, Published_Date, Last_Modified_Date)
                 VALUES (%s, %s, %s, %s, %s)"""
        description = item['cve']['descriptions'][0]['value']
        publish_date = item['cve'].get('published')  
        last_modified = item['cve'].get('lastModified')
        # Extract severity from cvssMetricV3 or cvssMetricV2 
        severity = None
        if 'metrics' in item['cve']:
            if 'cvssMetricV31' in item['cve']['metrics']:
                severity = item['cve']['metrics']['cvssMetricV31'][0].get('baseSeverity')
            elif 'cvssMetricV2' in item['cve']['metrics']:
                severity = item['cve']['metrics']['cvssMetricV2'][0].get('baseSeverity')
        cursor.execute(sql, (cve_id, description, publish_date, last_modified, severity))
        
def insert_cvss_metrics(cursor, cve_id, item):
    # Ensure correct path to the CVSS metrics
    if 'metrics' in item['cve']:
        cvss_metrics_v2 = item['cve']['metrics'].get('cvssMetricV2', [])
        cvss_metrics_v3 = item['cve']['metrics'].get('cvssMetricV31', [])

        # Insert CVSS v2 metrics if available
        if cvss_metrics_v2:
            for metric in cvss_metrics_v2:
                insert_cvss_metric(cursor, cve_id, metric, 'v2')

        # Insert CVSS v3 metrics if available
        if cvss_metrics_v3:
            for metric in cvss_metrics_v3:
                insert_cvss_metric(cursor, cve_id, metric, 'v3')

def insert_cvss_metric(cursor, cve_id, metric, version):
    cursor.execute("SELECT CVE_ID FROM CVSSMetrics WHERE CVE_ID = %s AND Version = %s", (cve_id, version))
    result = cursor.fetchone()
    if result:
        print(f"CVE ID '{cve_id}' with CVSS version '{version}' already exists in CVSSMetrics table. Skipping.")
    else:
        sql = """INSERT INTO CVSSMetrics (CVE_ID, Version, VectorString, AccessVector, AccessComplexity, Authentication,
                                         ConfidentialityImpact, IntegrityImpact, AvailabilityImpact, BaseScore,
                                         ExploitabilityScore, ImpactScore, AttackVector)
                 VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""
        cvss_data = metric['cvssData']
        exploitability_score = metric.get('exploitabilityScore')
        impact_score = metric.get('impactScore')
        attack_vector = metric.get('attackVector')
        cursor.execute(sql, (cve_id, version, cvss_data.get('vectorString'), cvss_data.get('accessVector'),
                             cvss_data.get('accessComplexity'), cvss_data.get('authentication'), cvss_data.get('confidentialityImpact'),
                             cvss_data.get('integrityImpact'), cvss_data.get('availabilityImpact'), cvss_data.get('baseScore'),
                             exploitability_score, impact_score, attack_vector))
        print(f"Inserted CVE ID '{cve_id}' with CVSS version '{version}' into CVSSMetrics table.")

def extract_product_name(cpe_string):
    # Extract the product name from the CPE string (e.g., 'cpe:2.3:a:apache:http_server:1.0.3:*:*:*:*:*:*:*')
    parts = cpe_string.split(':')
    if len(parts) >= 4:
        return parts[3]
    return 'Unknown'

def insert_product(cursor, product_name):
    try:
        # Check if the product already exists
        sql_check = "SELECT Product_ID FROM Product WHERE Name = %s"
        cursor.execute(sql_check, (product_name,))
        result = cursor.fetchone()

        if result:
            print(f"Product '{product_name}' already exists with ID {result['Product_ID']}.")
            return result['Product_ID']
        else:
            # Insert the new product
            sql_insert = "INSERT INTO Product (Name) VALUES (%s)"
            cursor.execute(sql_insert, (product_name,))
            product_id = cursor.lastrowid  # Fetch the last inserted ID
            print(f"Inserted new product '{product_name}' with ID {product_id}.")
            return product_id
    except pymysql.MySQLError as e:
        print(f"Error inserting product '{product_name}': {e}")
        raise


def link_cve_product(cursor, cve_id, product_id):
    try:
        # Check if the link already exists
        sql_check = "SELECT * FROM Vulnerability_Product WHERE CVE_ID = %s AND Product_ID = %s"
        cursor.execute(sql_check, (cve_id, product_id))
        result = cursor.fetchone()

        if result:
            print(f"Link between CVE ID '{cve_id}' and Product ID '{product_id}' already exists. Skipping.")
        else:
            # Insert the new link
            sql_insert = "INSERT INTO Vulnerability_Product (CVE_ID, Product_ID) VALUES (%s, %s)"
            cursor.execute(sql_insert, (cve_id, product_id))
            print(f"Linked CVE ID '{cve_id}' with Product ID '{product_id}'.")
    except pymysql.MySQLError as e:
        print(f"Error linking CVE ID '{cve_id}' with Product ID '{product_id}': {e}")
        raise

def extract_platform_name(cpe_string):
    # Extract the platform name from the CPE string (e.g., 'cpe:2.3:o:sun:sunos:4.1.1:*:*:*:*:*:*:*')
    parts = cpe_string.split(':')
    if len(parts) >= 5:
        return parts[4]
    return 'Unknown'

def insert_platform(cursor, platform_name):
    try:
        # Check if the platform already exists
        sql_check = "SELECT Platform_ID FROM Platform WHERE Name = %s"
        cursor.execute(sql_check, (platform_name,))
        result = cursor.fetchone()

        if result:
            print(f"Platform '{platform_name}' already exists with ID {result['Platform_ID']}.")
            return result['Platform_ID']
        else:
            # Insert the new platform
            sql_insert = "INSERT INTO Platform (Name) VALUES (%s)"
            cursor.execute(sql_insert, (platform_name,))
            platform_id = cursor.lastrowid
            print(f"Inserted new platform '{platform_name}' with ID {platform_id}.")
            return platform_id
    except pymysql.MySQLError as e:
        print(f"Error inserting platform '{platform_name}': {e}")
        raise

def link_cve_platform(cursor, cve_id, platform_id):
    try:
        # Check if the link already exists
        sql_check = "SELECT * FROM Vulnerability_Platform WHERE CVE_ID = %s AND Platform_ID = %s"
        cursor.execute(sql_check, (cve_id, platform_id))
        result = cursor.fetchone()

        if result:
            print(f"Link between CVE ID '{cve_id}' and Platform ID '{platform_id}' already exists. Skipping.")
        else:
            sql_insert = "INSERT INTO Vulnerability_Platform (CVE_ID, Platform_ID) VALUES (%s, %s)"
            cursor.execute(sql_insert, (cve_id, platform_id))
            print(f"Linked CVE ID '{cve_id}' with Platform ID '{platform_id}'.")
    except pymysql.MySQLError as e:
        print(f"Error linking CVE ID '{cve_id}' with Platform ID '{platform_id}': {e}")
        raise

if __name__ == "__main__":
    load_data()
