import json
import pymysql

def load_data():
    # Establish a MySQL connection
    connection = pymysql.connect(host='localhost',
                                 user='root',
                                 password='1234',
                                 database='cve',
                                 charset='utf8mb4',
                                 cursorclass=pymysql.cursors.DictCursor)

    with open('cve_data.json', 'r') as file:
        data = json.load(file)

    try:
        with connection.cursor() as cursor:
            # Iterate over each item in the JSON data
            for item in data['vulnerabilities']:
                cve_id = item['cve']['id']
                # print(f"Processing CVE ID: {cve_id} (Length: {len(cve_id)})")  # Log the ID and its length
                # Insert CVE data
                insert_cve(cursor, cve_id, item)
                # Insert and link Product data
                if 'products' in item:
                    for product in item['products']:
                        product_id = insert_product(cursor, product)
                        link_cve_product(cursor, item['cve']['id'], product_id)
                # Insert and link Platform data
                if 'platforms' in item:
                    for platform in item['platforms']:
                        platform_id = insert_platform(cursor, platform)
                        link_cve_platform(cursor, item['cve']['id'], platform_id)

        # Commit the changes
        connection.commit()

    finally:
        # Close the connection
        connection.close()

def insert_cve(cursor, cve_id, item):
    # Check if the CVE already exists
    cursor.execute("SELECT CVE_ID FROM CVE WHERE CVE_ID = %s", (cve_id,))
    result = cursor.fetchone()
    if result:
        print(f"CVE ID {cve_id} already exists. Skipping insert.")
    else:
        # Insert the new CVE
        sql = "INSERT INTO CVE (CVE_ID, Description) VALUES (%s, %s)"
        description = item['cve']['descriptions'][0]['value']  # Assuming there is always a description
        cursor.execute(sql, (cve_id, description))


def insert_product(cursor, product):
    sql = """INSERT INTO Product (Name) VALUES (%s) ON DUPLICATE KEY UPDATE Product_ID=LAST_INSERT_ID(Product_ID)"""
    cursor.execute(sql, (product,))
    return cursor.lastrowid

def link_cve_product(cursor, cve_id, product_id):
    sql = """INSERT INTO Vulnerability_Product (CVE_ID, Product_ID) VALUES (%s, %s)"""
    cursor.execute(sql, (cve_id, product_id))

def insert_platform(cursor, platform):
    sql = """INSERT INTO Platform (Name) VALUES (%s) ON DUPLICATE KEY UPDATE Platform_ID=LAST_INSERT_ID(Platform_ID)"""
    cursor.execute(sql, (platform,))
    return cursor.lastrowid

def link_cve_platform(cursor, cve_id, platform_id):
    sql = """INSERT INTO Vulnerability_Platform (CVE_ID, Platform_ID) VALUES (%s, %s)"""
    cursor.execute(sql, (cve_id, platform_id))

if __name__ == "__main__":
    load_data()
