import json
import pymysql

def load_data():
    # Establish a MySQL connection
    connection = pymysql.connect(host='localhost',
                                 user='root',
                                 password='1234',
                                 database='cve',
                                 charset='utf8mb4',
                                 cursorclass=pymysql.cursors.DictCursor)

    with open('cve_data.json', 'r') as file:
        data = json.load(file)

    try:
        with connection.cursor() as cursor:
            # Iterate over each item in the JSON data
            for item in data['vulnerabilities']:
                cve_id = item['cve']['id']
                # Insert CVSS metrics data
                insert_cvss_metrics(cursor, cve_id, item)

        connection.commit()

    finally:
        connection.close()

def insert_cvss_metrics(cursor, cve_id, item):
    # Ensure correct path to the CVSS metrics
    if 'metrics' in item['cve']:
        cvss_metrics_v2 = item['cve']['metrics'].get('cvssMetricV2', [])
        cvss_metrics_v3 = item['cve']['metrics'].get('cvssMetricV31', [])

        # Insert or update CVSS v2 metrics if available
        if cvss_metrics_v2:
            for metric in cvss_metrics_v2:
                insert_or_update_cvss_metric(cursor, cve_id, metric, 'v2')

        # Insert or update CVSS v3 metrics if available
        if cvss_metrics_v3:
            for metric in cvss_metrics_v3:
                insert_or_update_cvss_metric(cursor, cve_id, metric, 'v3')

def insert_or_update_cvss_metric(cursor, cve_id, metric, version):
    cvss_data = metric['cvssData']
    exploitability_score = metric.get('exploitabilityScore')
    impact_score = metric.get('impactScore')
    attack_vector = cvss_data.get('attackVector')

    cursor.execute("SELECT CVE_ID FROM CVSSMetrics WHERE CVE_ID = %s AND Version = %s", (cve_id, version))
    result = cursor.fetchone()

    if result:
        # Update the existing CVSS metric record
        sql = """UPDATE CVSSMetrics
                 SET VectorString = %s, AccessVector = %s, AccessComplexity = %s, Authentication = %s,
                     ConfidentialityImpact = %s, IntegrityImpact = %s, AvailabilityImpact = %s, BaseScore = %s,
                     ExploitabilityScore = %s, ImpactScore = %s, AttackVector = %s
                 WHERE CVE_ID = %s AND Version = %s"""
        cursor.execute(sql, (cvss_data.get('vectorString'), cvss_data.get('accessVector'), cvss_data.get('accessComplexity'),
                             cvss_data.get('authentication'), cvss_data.get('confidentialityImpact'), cvss_data.get('integrityImpact'),
                             cvss_data.get('availabilityImpact'), cvss_data.get('baseScore'), exploitability_score, impact_score,
                             attack_vector, cve_id, version))
        print(f"Updated CVE ID '{cve_id}' with CVSS version '{version}' in CVSSMetrics table.")
    else:
        # Insert a new CVSS metric record
        sql = """INSERT INTO CVSSMetrics (CVE_ID, Version, VectorString, AccessVector, AccessComplexity, Authentication,
                                         ConfidentialityImpact, IntegrityImpact, AvailabilityImpact, BaseScore,
                                         ExploitabilityScore, ImpactScore, AttackVector)
                 VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""
        cursor.execute(sql, (cve_id, version, cvss_data.get('vectorString'), cvss_data.get('accessVector'),
                             cvss_data.get('accessComplexity'), cvss_data.get('authentication'), cvss_data.get('confidentialityImpact'),
                             cvss_data.get('integrityImpact'), cvss_data.get('availabilityImpact'), cvss_data.get('baseScore'),
                             exploitability_score, impact_score, attack_vector))
        print(f"Inserted CVE ID '{cve_id}' with CVSS version '{version}' into CVSSMetrics table.")

if __name__ == "__main__":
    load_data()
